{"version":3,"sources":["../src/Method.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAUqB,MAAM;cAAN,MAAM;;AACvB,aADiB,MAAM,CACV,MAAM,EAAE,SAAS,EAAE;8BADf,MAAM;;YAEd,MAAM,GAAkB,MAAM,CAA9B,MAAM;YAAE,IAAI,GAAY,MAAM,CAAtB,IAAI;YAAE,MAAM,GAAI,MAAM,CAAhB,MAAM;;2EAFZ,MAAM,aAIb,SAAS,EAAE,IAAI;;AAErB,cAAK,MAAM,GAAG,MAAM,CAAA;AACpB,cAAK,IAAI,GAAG,IAAI,CAAA;AAChB,cAAK,MAAM,GAAG,MAAM,CAAA;AACpB,cAAK,eAAe,GAAG,SAAS,CAAC,eAAe,CAAA;;KACnD;;iBAVgB,MAAM;;4CAYF,MAAM,EAAE;AACzB,gBAAI,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpC,gBAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9C,gBAAI,oBAAoB,GAAG,EAAE,CAAC;;AAE9B,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5C,oBAAI,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAC3B,oBAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;;AAE9B,oBAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,EAAE;AACjD,kCAAc,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;iBACjC;aACJ;;AAED,gBAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE;AACjC,uBAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,sCAAsC,GAAG,oBAAoB,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;aACnH;;AAED,mBAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;SACjC;;;4BAEI,MAAM,EAAE;AACT,gBAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;AACrB,+BAAe,EAAE,IAAI,CAAC,eAAe;aACxC,EAAE,MAAM,CAAC,CAAA;;AAEV,mBAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAChC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAC9B;;;WAxCgB,MAAM;;;kBAAN,MAAM","file":"Method.js","sourcesContent":["/*\n * adyen-client\n *\n *\n * Copyright (c) 2015 Daniel Biedma Ramos\n * Licensed under the MIT license.\n */\n\nimport Client from './Client'\n\nexport default class Method extends Client {\n    constructor (config, clientCfg) {\n        let {method, path, fields} = config\n\n        super(clientCfg, path)\n\n        this.method = method\n        this.path = path\n        this.fields = fields\n        this.merchantAccount = clientCfg.merchantAccount\n    }\n\n    checkRequiredParams (params) {\n        var inputKeys = Object.keys(params);\n        var definitionKeys = Object.keys(this.fields);\n        var requiredRemainParams = [];\n\n        for (var i = 0; i < definitionKeys.length; i++) {\n            var ky = definitionKeys[i];\n            var cfgField = this.fields[ky]\n\n            if (keys.indexOf(ky.field) < 0 && cfgField.required) {\n                requiredParams.push(ky.field);\n            }\n        }\n\n        if (requiredRemainParams.length > 0) {\n            return Promise.reject(new Error('You dont send all required params. [' + requiredRemainParams.toString() + ']'))\n        }\n\n        return Promise.resolve(params)\n    }\n\n    run (params) {\n        let data = Object.assign({\n            merchantAccount: this.merchantAccount\n        }, params)\n\n        return this.checkRequiredParams(data)\n            .then(this.makeRequest)\n    }\n}\n"]}